// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/syned13/flight-prices-api/internal/services/clients (interfaces: ItineraryFetcherClient)

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "github.com/syned13/flight-prices-api/internal/models"
)

// MockItineraryFetcherClient is a mock of ItineraryFetcherClient interface.
type MockItineraryFetcherClient struct {
	ctrl     *gomock.Controller
	recorder *MockItineraryFetcherClientMockRecorder
}

// MockItineraryFetcherClientMockRecorder is the mock recorder for MockItineraryFetcherClient.
type MockItineraryFetcherClientMockRecorder struct {
	mock *MockItineraryFetcherClient
}

// NewMockItineraryFetcherClient creates a new mock instance.
func NewMockItineraryFetcherClient(ctrl *gomock.Controller) *MockItineraryFetcherClient {
	mock := &MockItineraryFetcherClient{ctrl: ctrl}
	mock.recorder = &MockItineraryFetcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItineraryFetcherClient) EXPECT() *MockItineraryFetcherClientMockRecorder {
	return m.recorder
}

// FetchItineraries mocks base method.
func (m *MockItineraryFetcherClient) FetchItineraries(arg0 context.Context, arg1 models.FlightSearchRequest) ([]models.Itinerary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchItineraries", arg0, arg1)
	ret0, _ := ret[0].([]models.Itinerary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchItineraries indicates an expected call of FetchItineraries.
func (mr *MockItineraryFetcherClientMockRecorder) FetchItineraries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchItineraries", reflect.TypeOf((*MockItineraryFetcherClient)(nil).FetchItineraries), arg0, arg1)
}
